// Generated by CoffeeScript 2.5.1
(function() {
  var extractCompositionFile, fs, getCompositionFileName, log, olog, ostr, p, pathmodule, print;

  pathmodule = {
    name: "pathmodule"
  };

  //###########################################################
  //region printLogFunctions
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["pathmodule"] != null) {
      console.log("[pathmodule]: " + arg);
    }
  };

  ostr = function(obj) {
    return JSON.stringify(obj, null, 4);
  };

  olog = function(obj) {
    return log("\n" + ostr(obj));
  };

  print = function(arg) {
    return console.log(arg);
  };

  //endregion

  //###########################################################
  p = require("path");

  fs = require("fs");

  //###########################################################
  pathmodule.root = "";

  //###########################################################
  pathmodule.initialize = function() {
    log("pathmodule.initialize");
  };

  //###########################################################
  extractCompositionFile = function(base) {
    var allFiles, file, i, len, result, tokens;
    log("digestAutocompositionFile");
    result = {};
    result.name = p.basename(base);
    allFiles = fs.readdirSync(base);
    for (i = 0, len = allFiles.length; i < len; i++) {
      file = allFiles[i];
      tokens = file.split(".");
      if (tokens[0] === "autocomposition") {
        if (tokens.length !== 3) {
          throw new Error("autocomposition file does not contain 2 '.' characters!");
        }
        result.ending = tokens[1];
        return result;
      }
    }
    throw new Error("We did not find a autocomposition file!");
  };

  
  //###########################################################
  getCompositionFileName = function(base) {
    var allFiles, file, i, len, tokens;
    log("getCompositionFileName");
    allFiles = fs.readdirSync(base);
    for (i = 0, len = allFiles.length; i < len; i++) {
      file = allFiles[i];
      tokens = file.split(".");
      if (tokens[0] === "autocomposition") {
        if (tokens.length !== 3) {
          throw new Error("autocomposition file does not contain 2 '.' characters!");
        }
        return file;
      }
    }
    throw new Error("We did not find a autocomposition file!");
  };

  //###########################################################
  pathmodule.digestPath = function(lePath) {
    log("pathmodule.digestPath");
    pathmodule.root = p.resolve(lePath);
  };

  pathmodule.compositionTemplatePath = function(base) {
    return p.resolve(base, getCompositionFileName(base));
  };

  pathmodule.outputPath = function(base) {
    var ending, name;
    ({name, ending} = extractCompositionFile(base));
    return p.resolve(base, name + "." + ending);
  };

  pathmodule.resolve = p.resolve;

  pathmodule.extension = function(lePath) {
    return p.extname(lePath).slice(1);
  };

  module.exports = pathmodule;

}).call(this);
