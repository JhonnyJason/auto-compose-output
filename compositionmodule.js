// Generated by CoffeeScript 2.5.1
(function() {
  var Composition, compositionmodule, filterByName, fs, log, m, olog, ostr, p, print;

  compositionmodule = {
    name: "compositionmodule"
  };

  //###########################################################
  //region printLogFunctions
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["compositionmodule"] != null) {
      console.log("[compositionmodule]: " + arg);
    }
  };

  ostr = function(obj) {
    return JSON.stringify(obj, null, 4);
  };

  olog = function(obj) {
    return log("\n" + ostr(obj));
  };

  print = function(arg) {
    return console.log(arg);
  };

  //endregion

  //###########################################################
  fs = require("fs");

  m = require("mustache");

  //###########################################################
  p = null;

  //###########################################################
  compositionmodule.initialize = function() {
    log("compositionmodule.initialize");
    p = allModules.pathmodule;
  };

  //###########################################################
  Composition = class Composition {
    constructor(basePath1) {
      var templatePath;
      this.basePath = basePath1;
      this.outputPath = p.outputPath(this.basePath);
      this.outputFileName = p.fileName(this.outputPath);
      templatePath = p.compositionTemplatePath(this.basePath);
      this.template = fs.readFileSync(templatePath, "utf-8");
      this.components = {};
      return;
    }

    
      //###########################################################
    async readComponents() {
      return (await this.digestAllFiles());
    }

    //###########################################################
    writeResult() {
      var name, obj, ref, result, writeObject;
      writeObject = {
        components: []
      };
      ref = this.components;
      for (name in ref) {
        obj = ref[name];
        obj.name = name;
        writeObject.components.push(obj);
      }
      result = m.render(this.template, writeObject);
      fs.writeFileSync(this.outputPath, result);
    }

    //###########################################################
    async digestAllFiles() {
      var allFiles, name, promises;
      allFiles = fs.readdirSync(this.basePath);
      promises = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = allFiles.length; i < len; i++) {
          name = allFiles[i];
          results.push(this.digestFilename(name));
        }
        return results;
      }).call(this);
      await Promise.all(promises);
    }

    async digestFilename(name) {
      var tokens;
      if (name === this.outputFileName) {
        return;
      }
      tokens = name.split(".");
      if (tokens.length === 1) {
        await this.digestDirectory(name);
      }
      if (tokens.length === 2) {
        await this.digestFile(tokens[0], tokens[1]);
      }
    }

    digestDirectory(name) {
      var base, comp, content, err, file, i, id, len, nextFiles, path;
      comp = this.components[name];
      if (comp == null) {
        comp = {};
      }
      this.components[name] = comp;
      base = p.resolve(this.basePath, name);
      nextFiles = fs.readdirSync(base);
      nextFiles = filterByName(nextFiles, name);
      for (i = 0, len = nextFiles.length; i < len; i++) {
        file = nextFiles[i];
        try {
          id = p.extension(file);
          path = p.resolve(base, file);
          content = fs.readFileSync(path, "utf-8");
          if (comp[id] == null) {
            comp[id] = content;
          }
        } catch (error) {
          err = error;
          log(err);
        }
      }
    }

    digestFile(name, extension) {
      var comp, content, err, id, path;
      comp = this.components[name];
      if (comp == null) {
        comp = {};
      }
      this.components[name] = comp;
      try {
        id = extension;
        path = p.resolve(this.basePath, name + "." + extension);
        content = fs.readFileSync(path, "utf-8");
        comp[id] = content;
      } catch (error) {
        err = error;
        log(err);
      }
    }

  };

  //###########################################################
  filterByName = function(fileNames, name) {
    var fileName, i, len, result;
    result = [];
    for (i = 0, len = fileNames.length; i < len; i++) {
      fileName = fileNames[i];
      if (fileName.split(".")[0] === name) {
        result.push(fileName);
      }
    }
    return result;
  };

  //###########################################################
  compositionmodule.autocompose = async function(basePath) {
    var composition, err;
    log("compositionmodule.autocompose");
    try {
      composition = new Composition(basePath);
    } catch (error) {
      err = error;
      return log(err);
    }
    await composition.readComponents();
    await composition.writeResult();
  };

  module.exports = compositionmodule;

}).call(this);
