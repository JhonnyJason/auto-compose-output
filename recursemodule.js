// Generated by CoffeeScript 2.5.1
(function() {
  var composition, fs, goDepthFirst, log, olog, ostr, p, print, recurseStep, recursemodule;

  recursemodule = {
    name: "recursemodule"
  };

  //###########################################################
  //region printLogFunctions
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["recursemodule"] != null) {
      console.log("[recursemodule]: " + arg);
    }
  };

  ostr = function(obj) {
    return JSON.stringify(obj, null, 4);
  };

  olog = function(obj) {
    return log("\n" + ostr(obj));
  };

  print = function(arg) {
    return console.log(arg);
  };

  //endregion

  //###########################################################
  fs = require("fs");

  //###########################################################
  p = null;

  composition = null;

  //###########################################################
  recursemodule.initialize = function() {
    log("recursemodule.initialize");
    p = allModules.pathmodule;
    composition = allModules.compositionmodule;
  };

  //###########################################################
  goDepthFirst = async function(base) {
    var allFiles, file, i, len, options, promises;
    log("goDepthFirst");
    options = {
      withFileTypes: true
    };
    allFiles = fs.readdirSync(base, options);
    promises = [];
    for (i = 0, len = allFiles.length; i < len; i++) {
      file = allFiles[i];
      if (file.isDirectory()) {
        promises.push(recurseStep(p.resolve(base, file.name)));
      }
    }
    await Promise.all(promises);
  };

  recurseStep = async function(base) {
    log("recurseStep");
    await goDepthFirst(base);
    await composition.autocompose(base);
  };

  //###########################################################
  recursemodule.start = async function() {
    log("recursemodule.start");
    await recurseStep(p.root);
  };

  module.exports = recursemodule;

}).call(this);
